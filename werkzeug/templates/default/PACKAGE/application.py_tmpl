# -*- coding: ${FILE_ENCODING} -*-
$make_docstring(MODULE, '''\
This module provides the WSGI application. It connects the URL map
from `%(PACKAGE)s.urls` to the views defined in `%(PACKAGE)s.views`.
The actual request and response objects are part of the
`%(PACKAGE)s.utils` module and should be imported from there in order
to avoid circular import dependencies.

The WSGI middlewares are applied in the `make_app` factory function that
automatically wraps the application within the require middlewares. Per
default only the `SharedDataMiddleware` is applied.''' % locals())
import os
from ${PACKAGE}.urls import url_map
from ${PACKAGE}.utils import Request, Response, RedirectResponse, \
     NotFoundResponse
from ${PACKAGE}.views import get_view
from werkzeug.utils import SharedDataMiddleware
from werkzeug.routing import NotFound, RequestRedirect


class ${PACKAGE_PASCAL_CASED}Application(object):
    """
    The application class. It's passed a directory with configuration values.
    """

    def __init__(self, config):
        self.config = config

    def __call__(self, environ, start_response):
        # create a new URL adapter for this request and pass it
        # to the new request object so that the views can build
        # URLs easily.
        url_adapter = url_map.bind_to_environ(environ)
        req = Request(environ, url_adapter)
        # try to get the matched view. If this is not possible
        # process the `NotFound` and `RequestRedirect` exceptions
        # that can occour.
        try:
            endpoint, args = url_adapter.match(req.path, req.method)
        except NotFound:
            resp = NotFoundResponse()
        except RequestRedirect, e:
            resp = RedirectResponse(e.new_url)
        else:
            resp = get_view(endpoint)(req, **args)
        # process the response as WSGI application. Because the
        # `Response` objects have the same signature those are
        # valid return values.
        return resp(environ, start_response)


def make_app(config=None):
    """
    Factory function that creates a new `${PACKAGE_PASCAL_CASED}Application`
    object. Optional WSGI middlewares should be applied here.
    """
    app = ${PACKAGE_PASCAL_CASED}Application(config or {})

    # files in the `public` folder are available on the URL so that there
    # is no need to start another server for that. For production setups
    # it's a good idea to override that in the webserver.
    app = SharedDataMiddleware(app, {
        '/public': os.path.join(os.path.dirname(__file__), 'public')
    })

    # if we are in debug mode we wrap the application in the debugger
    # middleware provided by werkzeug.
    if config.get('debug', False):
        from werkzeug.debug import DebuggedApplication
        app = DebuggedApplication(app, evalex=config.get('evalex', False))
    return app
